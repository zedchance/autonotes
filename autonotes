#!/usr/bin/env python3
"""autonotes – cli to automatically create LaTeX notes
"""

import os
import subprocess
from datetime import datetime
from milc import MILC
import milc.subcommand.config
import milc.questions

# Version number
version = subprocess.check_output(["git", "describe", "--tags"]).strip().decode()

# MILC object with version number
cli = MILC(f'autonotes {version}')


def emph(string):
    """ ANSI emphasis """
    emph = '{fg_blue}{style_bright}'
    end = '{style_reset_all}'
    return f'{emph}{string}{end}'


def __base_preamble(dir_name):
    """ Create a base preamble.tex file """
    preamble_path = f'{dir_name}/preamble.tex'
    cli.log.info(f'Creating bare {emph(preamble_path)}')
    preamble_file = open(preamble_path, 'w')
    preamble_str = f'% {dir_name} preamble\n' \
                   '\\usepackage{imakeidx}\n' \
                   '\\usepackage{marginnote}\n' \
                   '\\makeindex[columns=3, title=Date Index, intoc]\n' \
                   '\n% Author name\n' \
                   '\\author{}\n'
    preamble_file.write(preamble_str)
    preamble_file.close()


def __check_in_autonotes_dir():
    """ Check if inside directory with master.tex file """
    if not os.path.isfile('master.tex'):
        cli.log.error(f'I can\'t find a {emph("master.tex")} file, '
                      'are you inside an autonotes directory?')
        exit(3)


def __add(files):
    """ Adds files to master.tex """
    # Open master.tex and read in lines
    master = open('master.tex', 'r')
    lines = master.readlines()
    master.close()

    # Find end notes tag
    try:
        start = lines.index("\\documentclass{article}\n") + 1
        end = lines.index("%END NOTES\n")
    except:
        cli.log.error(f'Incorrect {emph("master.tex")} file, aborting')
        exit(1)

    # Insert files into master.tex
    for file in files:
        line_to_insert = '\\input{' \
                      f'{file}' \
                      '}\n'
        if '.tex' not in file:
            cli.log.warning(f'{emph(file)} isn\'t a .tex file, copying anyway')
        if lines.__contains__(line_to_insert):
            if not milc.questions.yesno(f'{emph(file)} already exists in {emph("master.tex")}, '
                                    f'do you want to insert again?'):
                continue
        cli.log.info(f'Inserting {emph(file)} into {emph("master.tex")}')
        if 'preamble.tex' in file:
            lines.insert(start, line_to_insert)
        else:
            lines.insert(end, line_to_insert)
            end += 1

    # Write new master.tex
    master = open('master.tex', 'w')
    master.writelines(lines)
    master.close()


def __rm(files):
    """ Remove files from master.tex """
    # Open master file and read in lines
    master = open('master.tex', 'r')
    lines = master.readlines()
    master.close()

    # Remove lines from master.tex if they exist
    for file in files:
        # Ask if the user really wants to remove preamble.tex
        if 'preamble.tex' in file:
            if not milc.questions.yesno(f'Are you sure you want to remove {emph(file)}?'):
                continue
        if not os.path.isfile(file):
            cli.log.error(f'I can\'t find {emph(file)}.')
        else:
            try:
                lines.remove('\\input{'
                             f'{file}'
                             '}\n')
                cli.log.info(f'Removed {emph(file)} from {emph("master.tex")}')

                # Delete files if --delete flag is on
                if cli.config.rm.delete:
                    cli.log.info(f'Deleting {emph(file)}')
                    os.remove(file)
            except:
                cli.log.error(f'I can\'t find {emph(file)} in the {emph("master.tex")} file.')

    # Write new master.tex
    master = open('master.tex', 'w')
    master.writelines(lines)
    master.close()


@cli.entrypoint('autonotes – automatically create LaTeX notes')
def main(cli):
    cli.log.info("No subcommand specified")
    cli.print_usage()


@cli.argument('-n', '--name', help='Name of directory to initialize')
@cli.argument('-p', '--preamble', help='Path to an existing preamble file', default=None)
@cli.subcommand('Initialize a new autonotes directory')
def init(cli):
    """ Creates a new autonotes directory """
    # Make dir
    dir_name = cli.config.init.name
    if dir_name is None:
        dir_name = milc.questions.question("Enter directory name: ")
    if os.path.isdir(dir_name):
        cli.log.error(f'Directory {emph(dir_name)} already exists')
        exit(2)
    cli.log.info(f'Creating {emph(dir_name)} directory')
    os.mkdir(dir_name)

    # Preamble
    preamble_path = cli.config.init.preamble
    if preamble_path is None:
        __base_preamble(dir_name)
    elif os.path.isdir(preamble_path):
        cli.log.error(f'{emph(preamble_path)} is a directory, can\'t copy')
        __base_preamble(dir_name)
    elif not os.path.exists(preamble_path):
        cli.log.error(f'{emph(preamble_path)} doesn\'t exist, can\'t copy')
        __base_preamble(dir_name)
    else:
        if '.tex' not in preamble_path:
            cli.log.warning(f'{emph(preamble_path)} isn\'t a .tex file, copying anyway')
        cli.log.info(f'Copying {emph(preamble_path)}')
        input_preamble = open(preamble_path, 'r')
        input_preamble_lines = input_preamble.readlines()
        input_preamble.close()
        output_preamble = open(f'{dir_name}/preamble.tex', 'w')
        output_preamble.writelines(input_preamble_lines)
        output_preamble.close()

    # Create master.tex file
    master_path = f'{dir_name}/master.tex'
    cli.log.info(f'Creating {emph(master_path)}')
    master = open(master_path, 'w')
    master_str = f'% {dir_name} master file\n' \
                 '\n' \
                 '\\documentclass{article}\n' \
                 '\\input{preamble.tex}\n' \
                 '\n' \
                 '\\title{' \
                 f'{dir_name}' \
                 '}\n' \
                 '\\date{}\n' \
                 '\n' \
                 '\\begin{document}\n' \
                 '\\maketitle\n' \
                 '\\tableofcontents\n' \
                 '\\newpage\n' \
                 '\n%BEGIN NOTES\n%END NOTES\n\n' \
                 '\\printindex\n\n' \
                 '\\end{document}\n'
    master.write(master_str)
    master.close()


@cli.argument('-f', '--filename', help='Filename of note', default='entry')
@cli.argument('-t', '--title', help='Title of note', default='')
@cli.argument('--no-date', action='store_true', help='No date in filename')
@cli.subcommand('Create a new entry')
def new(cli):
    """ Creates a new entry  """
    __check_in_autonotes_dir()

    # Filename
    filename = cli.config.new.filename
    file_date = datetime.now().strftime("%Y%m%d")
    today = datetime.now().strftime("%b %d")
    if not cli.config.new.no_date:
        filename += f'-{file_date}'
    filename += '.tex'
    if os.path.exists(filename):
        cli.log.error(f'File {emph(filename)} already exists.')
        exit(1)

    # Note title
    title = cli.config.new.title
    if title == '':
        title = f'Untitled {cli.config.new.filename}'

    # Open file for writing
    file = open(filename, 'w')
    cli.log.info(f'Created {emph(filename)}')
    new_note_str = f'% {filename}\n\n' \
                   '\\section{' \
                   f'{title}' \
                   '}\n' \
                   '\\marginnote{' \
                   f'{today}' \
                   '\\index{' \
                   f'{today}' \
                   '}}[.2cm]\n'
    file.write(new_note_str)
    file.close()

    # Add the new file to master.tex
    __add([filename])


@cli.argument('file', nargs='*', help='Files to add to master')
@cli.subcommand('Add a .tex file to master')
def add(cli):
    """ Adds a .tex file to the master file """
    __check_in_autonotes_dir()

    # File args
    files = cli.config.add.file

    # Add the files to master.tex
    __add(files)


@cli.argument('--delete', help='Remove the entry from the master, and remove the file', action='store_true')
@cli.argument('file', nargs='*', help='Files to remove from master')
@cli.subcommand('Remove an entry from master')
def rm(cli):
    """ Removes an entry from the master file """
    __check_in_autonotes_dir()

    # File args
    files = cli.config.rm.file

    # Remove the files
    __rm(files)


if __name__ == '__main__':
    cli()
